(*
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;



(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;

(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)

    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string

    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    let lookup (env : env) (varname : varid) : value =
      !(List.assoc varname env) ;;

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (List.remove_assoc varname env) @ [(varname, loc)] ;;

    let env_to_string (env : env) : string =
      let rec inner (env' : env) : string =
        if env' != empty () then let var, value = List.hd env' in
          (match !value with
          | Val vaal ->
            var ^ " -> " ^ exp_to_concrete_string vaal ^
            if List.length env' > 1 then ", " ^ inner (List.tl env') else ""
          | _ -> raise (EvalError "something off with env_to_string"))
        else "" in
        "[" ^ inner env ^ "]" ;;

    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) -> exp_to_concrete_string exp ^ "where" ^ env_to_string env ;;
  end
;;

(* Tests for the ENV modules are below. *)
let env_tests () =
  let x = Env.env_to_string (Env.extend (Env.empty()) "x" (ref (Env.Val(Num(3))))) in
  let y = "[x -> 3]" in
  assert (x = y) ;
  let env_1 = Env.extend (Env.empty()) "x" (ref (Env.Val(Num(3)))) in
  let x = Env.env_to_string env_1 in
  let y = "[x -> 3]" in
  assert (x = y) ;
  let env_2 = Env.extend env_1 "y" (ref (Env.Val(Num(4)))) in
  let x = Env.env_to_string env_2 in
  let y = "[x -> 3, y -> 4]" in
  assert (x = y) ;
  let env_3 = Env.extend env_2 "z" (ref (Env.Val(Num(5)))) in
  let x = Env.env_to_string env_3 in
  let y = "[x -> 3, y -> 4, z -> 5]" in
  assert (x = y) ;
  let x = Env.lookup env_2 "y" in
  let y = Env.Val (Num 4) in
  assert (x = y) ;
  let tabs = Env.extend (Env.empty ()) "x" (ref (Env.Val(Num(3)))) in
  let x = Env.value_to_string (Val(Num(3))) in
  let y = "3" in
  assert (x = y) ;
  let x = Env.value_to_string (Val(Var("x"))) in
  let y = "x" in
  assert (x = y) ;
  let x = Env.value_to_string (Val(Bool(true))) in
  let y = "true" in
  assert (x = y) ;
  () ;;

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an enviornment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures).

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* Helper function for evaluating binary operations
used for all three ways of evaluating *)
let binop_eval (op : binop) (exp1 : expr) (exp2 : expr): expr =
  let num_op (op : binop) (a : int) (b : int) : expr =
  (match op with
  | Plus -> Num (a + b)
  | Minus -> Num (a - b)
  | Times -> Num (a * b)
  | Equals -> if a = b then Bool true else Bool false
  | LessThan -> if a < b then Bool true else Bool false
  | LessEq -> if a <= b then Bool true else Bool false
  | GreaterThan -> if a > b then Bool true else Bool false
  | GreaterEq -> if a >= b then Bool true else Bool false) in

  match exp1, exp2 with
  | Num a, Num b -> num_op op a b
  | Num a, Unop(Negate, Num b) -> num_op op a ~-b
  | Unop(Negate, Num a), Num b -> num_op op ~-a b
  | Unop(Negate, Num a), Unop(Negate, Num b) -> num_op op ~-a ~-b
  | _, _->
    (match op with
     | Plus -> Binop(Plus, exp1, exp2)
     | Minus -> Binop(Minus, exp1, exp2)
     | Times -> Binop(Times, exp1, exp2)
     | _ -> raise (EvalError "Operation here not allowed."))
 ;;

(* Types defined for the three models, to be passed into "evaluator" function *)
 type model =
   | Substitution
   | Dynamic
   | Lexical
 ;;
(* For comparison/tests later, an empty varidset/env defined *)
let empty = free_vars (Num(3)) ;;
let empty_env = Env.empty () ;;

(* The below evaluator gives takes in an expression, an environment
   and a model, and evaluates the expression with the given environment
   (if any) using the model specified. *)
let evaluator (_exp : expr) (_env : Env.env) (model : model): Env.value =
  if not (empty = free_vars _exp) then raise (EvalError "free var in expr")
  else let rec eval (exp' : expr) (env' : Env.env) : Env.value =
     match exp' with
       | Var var ->
         (match model with
          | Substitution -> Env.Val (Var var)
          | _            -> Env.lookup env' var)
       | Num num ->
         (match model with
          | Substitution -> Env.Val (Num num)
          | _            -> Env.Val (Num num))
       | Bool bool -> Env.Val (Bool bool)
       | Unop (unop, exp1) ->
         (match model with
          | Substitution ->
            let Val this = eval exp1 _env in
            Env.Val (Unop (unop, this))
          | _            ->
            (match eval exp1 env' with
             | Val exp -> Env.Val (Unop (unop, exp))
             | _ -> raise (EvalError "Invalid operation")))
     | Binop (binop, exp1, exp2) ->
       (match model with
        | Substitution ->
          let Val this1 = eval exp1 env' in
          let Val this2 = eval exp2 env' in
          Val (binop_eval binop (this1) (this2))
        | _            ->
         (match eval exp1 env', eval exp2 env' with
         | Val exp_1, Val exp_2 -> Val (binop_eval binop (exp_1) (exp_2))
         | _ -> raise (EvalError "Invalid binary operation")))
     | Fun (var, exp) ->
       (match model with
        | Substitution -> Env.Val (Fun(var, exp))
        | Dynamic -> Env.Val (Fun(var, exp))
        | Lexical -> Env.close (Fun (var, exp)) env')
     | Conditional (exp1, exp2, exp3) ->
       if eval exp1 env' = Env.Val (Bool true) then eval exp2 env'
       else eval exp3 env'
     | App (exp, applied) ->
       (match model with
        | Substitution ->
         (match eval exp env' with
         | Val (Fun (x, bod)) ->
           let Val evaled_def = eval applied env' in
           eval (subst x evaled_def bod) env'
         | _ -> raise (EvalError "You cannot apply an expression that is not a function"))
       | Dynamic ->
          (match eval exp env' with
            | Val (Fun (f, bod)) ->
             eval bod (Env.extend env' f (ref (eval applied env')))
           | _ -> raise (EvalError "You cannot apply an expression that is not a function"))
        | Lexical ->
          (match eval exp env' with
          | Env.Closure (Fun (x, bod), lex_env) ->
            eval bod (Env.extend lex_env x (ref (eval applied env')))
             | _ -> raise (EvalError "You can't apply an expression that is not a function")))
     | Let (var, def, bod) ->
       (match model with
        | Substitution ->
          let Val evaled_def = eval def env' in
          eval (subst var (evaled_def) (bod)) env'
        | _ ->
         let evaled_def = eval def env' in
         let new_env = Env.extend env' var (ref evaled_def) in
         eval bod new_env)
     | Letrec (var, def, bod) ->
       (match model with
        | Substitution ->
          let Val evaled_def = eval def env' in
          let Val evaled_2 = eval evaled_def env' in
          let Val evaled_2_5 = eval (Letrec(var, evaled_def, Var(var))) env' in
          let Val evaled_3 = eval (subst var (evaled_2_5) (evaled_2)) env' in
          eval (subst var evaled_3 bod) env'
        | _ ->
         let varvar = ref (Env.Val (Unassigned)) in
         let interim = Env.extend (env') (var) (varvar) in
         let evaled_def = eval def interim in
         let new_env = Env.extend interim var (ref (evaled_def)) in
              varvar := evaled_def; eval bod new_env)
     | Unassigned -> Env.Val Unassigned
     | Raise str -> Env.Val (Raise str)
    in eval _exp _env ;;

(* The SUBSTITUTION SEMANTICS MODEL *)
let eval_s (exp : expr) (_env : Env.env) : Env.value =
  evaluator exp _env Substitution ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL *)
let eval_d (_exp : expr) (_env : Env.env) : Env.value =
  evaluator _exp _env Dynamic ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL *)
let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  evaluator _exp _env Lexical ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "N" ;;

(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, evaluate is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)


(* Tests for the models *)
let models_tests (model : model) : unit =
  (* Tests for Binop *)
  let x = Binop(Plus, Num(21), Num(2)) in
  let y = Env.value_to_string (evaluator x empty_env model) in
  let z = string_of_int (21 + 2) in
  assert (y = z) ;
  let x = Binop(Plus, Unop(Negate, Num(1)), Num(2)) in
  let y = Env.value_to_string (evaluator x empty_env model) in
  let z = string_of_int (~-1 + 2) in
  assert (y = z) ;
  let x = Binop(Times, Num(0), Num(7)) in
  let y = Env.value_to_string (evaluator x empty_env model) in
  let z = string_of_int (0 * 7) in
  assert (y = z) ;
  let x = Binop(Times, Unop(Negate, Num(1)), Unop(Negate, Num(5))) in
  let y = Env.value_to_string (evaluator x empty_env model) in
  let z = string_of_int (5) in
  assert (y = z) ;
  let x = Binop(Times, Num(0), Num(7)) in
  let y = Env.value_to_string (evaluator x empty_env model) in
  let z = string_of_int (0 * 7) in
  assert (y = z) ;
  let x = Binop(Times, Num(9), Num(9)) in
  let y = Env.value_to_string (evaluator x empty_env model) in
  let z = string_of_int (81) in
  assert (y = z) ;
  (* Tests of Comparison *)
  let x = Binop(GreaterThan, Num(5), Num(4)) in
  let y = evaluator x empty_env model in
  let z = Env.Val (Bool true) in
  assert (y = z) ;
  let x = Binop(LessThan, Num(5), Num(4)) in
  let y = evaluator x empty_env model in
  let z = Env.Val (Bool false) in
  assert (y = z) ;
  let x = Binop(GreaterEq, Num(5), Num(5)) in
  let y = evaluator x empty_env model in
  let z = Env.Val (Bool true) in
  assert (y = z) ;
  let x = Binop(GreaterThan, Unop(Negate, Num(1)), Num(3)) in
  let y = evaluator x empty_env model in
  let z = Env.Val (Bool false) in
  assert (y = z) ;
  let x = Binop(Equals, Num(5), Num(5)) in
  let y = evaluator x empty_env model in
  let z = Env.Val (Bool true) in
  assert (y = z) ;
  (* Tests for Function, Let, Letrec, Conditional *)
  let x = Letrec("f", Fun("n", Conditional(Binop(Equals, Var("n"), Num(0)), Num(1), Binop(Times, Var("n"), App(Var("f"), Binop(Minus, Var("n"), Num(1)))))), App(Var("f"), Num(2))) in
  let Env.Val (Num(y)) = evaluator x empty_env Dynamic in
  let Env.Val (Num(z)) = evaluator x empty_env Lexical in
  assert (y = 2) ;
  assert (z = 2) ;
  let x = Letrec("fact", Fun("n", Conditional(Binop(Equals, Var("n"), Num(0)), Num(1), Binop(Times, Var("n"), App(Var("fact"), Binop(Minus, Var("n"), Num(1)))))), App(Var("fact"), Num(10))) in
  let Env.Val (Num(y)) = evaluator x empty_env Dynamic in
  let Env.Val (Num(z)) = evaluator x empty_env Lexical in
  assert (y = 3628800) ;
  assert (z = 3628800) ;
  (* Individual tests where dynamically scoped model differs from lexically
     scoped model in evaluating *)
  let x = Let("x", Num(2), Let("f", Fun("y", Binop(Times, Var("x"), Var("y"))), Let("x", Num(1), App(Var("f"), Num(21))))) in
  let Env.Val (Num(y)) = evaluator x empty_env Dynamic in
  let Env.Val (Num(z)) = evaluator x empty_env Lexical in
  assert (y * 2 = z) ;
  ()
;;

let run_tests =
  tests_in_expr ();
  env_tests ();
  models_tests Dynamic;
  models_tests Substitution;
  models_tests Lexical
  ;;
let evaluate =
  eval_t ;;
